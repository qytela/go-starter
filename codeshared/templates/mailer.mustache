package utils

import (
	"fmt"
	"gopkg.in/gomail.v2"
	"os"
	"regexp"
	"{{workDir}}/pkg/logger"
	"strconv"
)

// CreateMailBodyHTML method for create mail body from 'html' and replace key value
func CreateMailBodyHTML(path string, data map[string]string) (string, error) {
	file, err := os.ReadFile(path)
	if err != nil {
		return "", err
	}

	text := string(file)

	for key, value := range data {
		text = regexp.MustCompile("{{ "+key+" }}").ReplaceAllString(text, value)
	}

	return text, nil
}

// SendMail method with SMTP configuration
func SendMail(to string, subject string, view string, data map[string]string) {
	var (
		CONFIG_SMTP_HOST        = os.Getenv("SMTP_HOST")
		CONFIG_SMTP_PORT, _     = strconv.Atoi(os.Getenv("SMTP_PORT"))
		CONFIG_SMTP_FROM_SENDER = os.Getenv("SMTP_FROM_SENDER")
		CONFIG_SMTP_USERNAME    = os.Getenv("SMTP_USERNAME")
		CONFIG_SMTP_PASSWORD    = os.Getenv("SMTP_PASSWORD")
	)

	// Create mail body
	body, err := CreateMailBodyHTML(fmt.Sprintf("./views/emails/%s.html", view), data)
	if err != nil {
		logger.MakeLogEntry(nil).Error("SendMail: view not found")
	}

	// Configure mail header
	mailer := gomail.NewMessage()
	mailer.SetHeader("From", CONFIG_SMTP_FROM_SENDER)
	mailer.SetHeader("To", to)
	mailer.SetHeader("Subject", subject)
	mailer.SetBody("text/html", body)

	dialer := gomail.NewDialer(
		CONFIG_SMTP_HOST,
		CONFIG_SMTP_PORT,
		CONFIG_SMTP_USERNAME,
		CONFIG_SMTP_PASSWORD,
	)

	if err := dialer.DialAndSend(mailer); err != nil {
		logger.MakeLogEntry(nil).Error("Failed to send mail: ", err)
	}

	logger.MakeLogEntry(nil).Info("Success to send mail: ", to)
}
