package middleware

import (
	"{{workDir}}/api/models"
	"{{workDir}}/api/responses"
	"{{workDir}}/pkg/auth"
	"{{workDir}}/pkg/exception"
	"{{workDir}}/services/users-service/config"
	"strings"

	"github.com/labstack/echo/v4"
)

// Auth middleware for check Token in header Authorization,
// if token valid check the user exists
func Auth(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		clientToken := c.Request().Header.Get("Authorization")
		if clientToken == "" {
			return c.JSON(400, &exception.ErrorResponse{
				Status:  false,
				Code:    400,
				Message: "No Authorization header provided",
			})
		}

		extractedToken := strings.Split(clientToken, "Bearer ")
		if len(extractedToken) == 2 {
			clientToken = strings.TrimSpace(extractedToken[1])
		} else {
			return c.JSON(400, &exception.ErrorResponse{
				Status:  false,
				Code:    400,
				Message: "Incorrect Format of Authorization Token",
			})
		}

		claims, err := auth.ValidateToken(clientToken)
		if err != nil {
			return c.JSON(401, &exception.ErrorResponse{
				Status:  false,
				Code:    401,
				Message: "Token is Invalid / Expired",
			})
		}

		db := config.DatabaseConnection()
		sqlDB, _ := db.DB()
		defer sqlDB.Close()

		var user models.User
		if err := db.
			Where("id = ?", claims.UserID).
			First(&user).Error; err != nil {
			return responses.NewInvalidCredential()
		}

		if !user.IsVerified() {
			return responses.NewNotVerifiedUser()
		}

		c.Set("UserID", claims.UserID)

		return next(c)
	}
}
