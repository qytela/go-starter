package validation

import (
	"fmt"
	"gorm.io/gorm"
	"{{workDir}}/pkg/logger"
	"strings"

	"github.com/go-playground/validator/v10"
)

type CustomValidator struct {
	validation *validator.Validate
}

// NewCustomValidator constructor
func NewCustomValidator(db *gorm.DB) *CustomValidator {
	validation := validator.New()

	validation.RegisterValidation("exists", func(fl validator.FieldLevel) bool {
		return IsExists(fl, db)
	})
	validation.RegisterValidation("unique", func(fl validator.FieldLevel) bool {
		return IsUnique(fl, db)
	})
	validation.RegisterValidation("not_verified_user_registration_again", func(fl validator.FieldLevel) bool {
		return IsNotVerifiedUserRegistrationAgain(fl, db)
	})
	validation.RegisterValidation("oneof", IsOneOf)
	validation.RegisterValidation("equal", IsEqual)

	return &CustomValidator{validation}
}

// Validate method
func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validation.Struct(i)
}

// IsExists validation if record exists on table
//
// Usage: exists=<table> <column>
func IsExists(fl validator.FieldLevel, db *gorm.DB) bool {
	field := fl.Field().Interface()
	tableColumn := strings.Split(fl.Param(), " ")

	if len(tableColumn) != 2 {
		logger.MakeLogEntry(nil).Panic("IsExists: invalid format validation")
	}

	table := tableColumn[0]
	column := tableColumn[1]

	var count int64
	if err := db.
		Table(table).
		Where(fmt.Sprintf("%s = ?", column), field).
		Count(&count).Error; err != nil {
		return false
	}

	return count > 0
}

// IsUnique validation if record has already exists on table
//
// Usage: unique=<table> <column>
func IsUnique(fl validator.FieldLevel, db *gorm.DB) bool {
	field := fl.Field().Interface()
	tableColumn := strings.Split(fl.Param(), " ")

	if len(tableColumn) != 2 {
		logger.MakeLogEntry(nil).Panic("IsUnique: invalid format validation")
	}

	table := tableColumn[0]
	column := tableColumn[1]

	var count int64
	if err := db.
		Table(table).
		Where(fmt.Sprintf("%s = ?", column), field).
		Count(&count).Error; err != nil {
		return false
	}

	return !(count > 0)
}

// IsOneOf validation enum
//
// Usage: oneof=PROGRESS DONE ...
func IsOneOf(fl validator.FieldLevel) bool {
	field := fl.Field().Interface()
	types := strings.Split(fl.Param(), " ")

	for _, val := range types {
		if field == val {
			return true
		}
	}

	return false
}

// IsEqual validation if other field equal value field
//
// Usage:
//
// Password 	   string `json:"password"`
//
// ConfirmPassword string `json:"confirm_password" validate:"equal=password"`
func IsEqual(fl validator.FieldLevel) bool {
	field := fl.Field().String()
	param := fl.Param()

	return field == fl.Parent().FieldByName(param).String()
}
